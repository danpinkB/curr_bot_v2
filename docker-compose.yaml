version: "3.8"

volumes:
  kv_db_data:
  message_broker_data:

x-common-docker-image: &common-docker-image
  image: common-docker-image
  build:
    context: .
    dockerfile: ./Dockerfile

services:
  price_parser_binance:
    <<: *common-docker-image
    command: ["python", "-m", "price_parser_binance"]
    container_name: price_parser_binance
    restart: unless-stopped
    environment:
      SETTINGS_DB__DSN : ${SETTINGS_DB__DSN}
      #PRICE_DB__DSN : ${PRICE_DB__DSN}
      MESSAGE_BROKER_SENDER__DSN : ${MESSAGE_BROKER__DSN}
      MESSAGE_BROKER_SENDER__QUE: 'price'
    depends_on:
      - message_broker
      - kv_db


  last_price_api:
    <<: *common-docker-image
    command: ["python", "-m", "last_price_api"]
    container_name: last_price_api
    restart: unless-stopped
    environment:
      MESSAGE_BROKER_CONSUMER__DSN : ${MESSAGE_BROKER__DSN}
      MESSAGE_BROKER_CONSUMER__QUE : 'price'

      MESSAGE_BROKER_SENDER__DSN : ${MESSAGE_BROKER__DSN}
      MESSAGE_BROKER_SENDER__QUE : 'notification'

      SETTINGS_DB__DSN : ${SETTINGS_DB__DSN}
      #PRICE_DB__DSN : ${PRICE_DB__DSN}
    depends_on:
      - message_broker
      - kv_db


  management_api:
    <<: *common-docker-image
    command: ["python", "-m", "management_api"]
    container_name: management_api
    restart: unless-stopped
    environment:
      SETTINGS_DB__DSN : ${SETTINGS_DB__DSN}
      #PRICE_DB__DSN : ${PRICE_DB__DSN}
      MANAGEMENT_API_PORT : ${MANAGEMENT_API_PORT}

    healthcheck:
      test: [ "CMD", "python", "healthcheck.py" ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 5s
    depends_on:
      - kv_db


  tg_bot_management:
    volumes:
      - ${PWD}/.var/users:/docker_app/.var/users
    <<: *common-docker-image
    command: ["python", "-m", "tg_bot_management"]
    #container_name: tg_bot_management
    restart: unless-stopped
    environment:
      MANAGEMENT_API_URI: management_api
      MANAGEMENT_API_PORT: ${MANAGEMENT_API_PORT}

      TELEGRAM_BOT_PASSWORD: ${TELEGRAM_BOT_PASSWORD}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}

      DB_PATH: ""
    depends_on:
      - management_api


  tg_bot_notifier:
    volumes:
      - ${PWD}/.var/users:/docker_app/.var/users
    <<: *common-docker-image
    command: ["python", "-m", "tg_bot_notifier"]
    container_name: tg_bot_notifier
    restart: unless-stopped
    environment:
      TELEGRAM_BOT_PASSWORD: ${TELEGRAM_BOT_PASSWORD}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}

      MESSAGE_BROKER_CONSUMER__DSN : ${MESSAGE_BROKER__DSN}
      MESSAGE_BROKER_CONSUMER__QUE: 'notification'

      SYNC_DB__DSN : ${NOTIFIER_SYNC_DB__DSN}
      SETTINGS_DB__DSN: ${SETTINGS_DB__DSN}
      DB_PATH: ""
    depends_on:
      - message_broker


  price_parser_uniswap:
    <<: *common-docker-image
    command: ["python", "-m", "price_parser_uniswap"]
#    container_name: price_parser_uniswap
    restart: unless-stopped
    deploy:
      replicas: 3
    environment:
      JSON_RPC_PROVIDER : ${JSON_RPC_PROVIDER}
      SETTINGS_DB__DSN : ${SETTINGS_DB__DSN}
      PATH_DB__DSN : ${PATH_DB__DSN}
      SYNC_DB__DSN : ${PRICE_SYNC_DB__DSN}

      MESSAGE_BROKER_SENDER__DSN : ${MESSAGE_BROKER__DSN}
      MESSAGE_BROKER_SENDER__QUE : 'price'
    depends_on:
      - kv_db
      - message_broker

  path_parser_uniswap:
    <<: *common-docker-image
    command: [ "python", "-m", "path_parser_uniswap" ]
#    container_name: path_parser_uniswap
    restart: unless-stopped
    deploy:
      replicas: 3
    environment:
      JSON_RPC_PROVIDER: ${JSON_RPC_PROVIDER}
      SETTINGS_DB__DSN: ${SETTINGS_DB__DSN}
      PATH_DB__DSN: ${PATH_DB__DSN}
      SYNC_DB__DSN: ${PATH_SYNC_DB__DSN}
    depends_on:
      - kv_db
      - message_broker

  kv_db:
    image: 'redislabs/redismod'
    volumes:
      - kv_db_data:/.var
    container_name: kv_db
    restart: unless-stopped
    ports:
      - "6379:6379"

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    build: .
    restart: always
    environment:
      - REDIS_HOSTS=local:kv_db:6379
    ports:
      - "8081:8081"

  message_broker:
    image: 'rabbitmq:3-management'
    volumes:
      - message_broker_data:/var/lib/rabbitmq
    restart: unless-stopped
    container_name: message_broker
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5672" ]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "15672:15672"
      - "5672:5672"
# regular expression for intelij ---->>>> \= os\.environ\.get\("\w*"\) replace ----->>>>>: \${}